/*
    Copyright 2018 KeycapEmu

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#include <keycap/root/compression/zip.hpp>

#include <rapidcheck/catch.h>

#include <zlib.h>

using namespace keycap::root::compression;

TEST_CASE("Zip")
{
    SECTION("Compressing constant data must always yield the same result")
    {
        std::string input = "Hello, World!";
        std::vector<uint8_t> expected
            = {120, 218, 243, 72, 205, 201, 201, 215, 81, 8, 207, 47, 202, 73, 81, 4, 0, 31, 158, 4, 106};

        auto output = zip::compress(input.begin(), input.end());

        auto foo = zip::decompress(output.begin(), output.end());

        REQUIRE(std::equal(expected.begin(), expected.end(), output.begin()));
    }

    SECTION("Compressing constant data must always yield the same result")
    {
        std::vector<uint8_t> input
            = {120, 156, 243, 72, 205, 201, 201, 215, 81, 8, 207, 47, 202, 73, 81, 4, 0, 31, 158, 4, 106};
        std::string expected = "Hello, World!";

        auto output = zip::decompress(input.begin(), input.end());

        REQUIRE(std::equal(expected.begin(), expected.end(), output.begin()));
    }

    rc::prop("Decompressing compressed arbitrary data must always be the same as the input", [](std::string input) {

        auto output = zip::compress(input.begin(), input.end());
        auto decompressed = zip::decompress(output.begin(), output.end());

        std::string str{decompressed.begin(), decompressed.end()};

        REQUIRE(str == input);
    });

    SECTION("Compressing a large data set must yield the expected output", "[regression]")
    {
        std::string input = R"#(<systemdescription platform="Win32" arch="x86" version="2.1.1" survey="1">
<game name="worldofwarcraft" locale="enUS"/>
<cpu num="8" vendor="GenuineIntel" versiona="0x000306a9" versionb="0x01100800" featuresc="0x7fbae3ff" featuresd="0xbfebfbff" exfeaturesc="0x00000001" exfeaturesd="0x28100000" cores="0x1c004121" cache="\x01\x5a\x03\x76\xff\xb2\xf0\xca" brand="        Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz" maxspeed="3401" currspeed="3401"/>
<ram physical="32720"/>
<os platform="2" arch="9" major="6" minor="2" additional="" build="9200" privilege="3" filesystem="NTFS" freedisk="51094" totaldisk="456865" lang="0809" cp="1252" tz="60" dst="60" flags="0x30000010"/>
<directx version="9.0.904"/>
<hardware battery="0"/>
<video id="1" vendor="0x10de" device="0x13c2" master="1" devcaps="0x001bbef0" vertex="0xfffe0300" pixel="0xffff0300" width="2560" height="1080" refresh="120" format="0x00000016" vram="4096" bus="pcie" busmult="16" gpu="1" driver="nvldumd.dll" version="25.21.14.1681" description="NVIDIA GeForce GTX 970"/>
<video id="2" vendor="0x10de" device="0x13c2" master="1" devcaps="0x001bbef0" vertex="0xfffe0300" pixel="0xffff0300" width="1920" height="1080" refresh="60" format="0x00000016" vram="4096" bus="pcie" busmult="16" gpu="1" driver="nvldumd.dll" version="25.21.14.1681" description="NVIDIA GeForce GTX 970"/>
<audio id="1" caps="0x00000f1f" speakers="0x00140004" module="{0.0.0.00000000}.{a86eccba-624c-40d4-9999-be06f46b0611}" desciption="Kopfh\xf6rer (Xonar U7)"/>
<audio id="2" caps="0x00000f1f" speakers="0x00140004" module="{0.0.0.00000000}.{7fbe3001-1fe5-48e3-8be9-b7439cff737f}" desciption="SPDIF Out (Xonar U7)"/>
<options renderer="directx" window="0" widescreen="1" resolution="" width="2560" height="1080" multisample="0" musicvolume="0" farclip="0" refresh="0" colorbits="0"/>
<vista system="7.5" memory="8.3" cpu="8.3" disk="7.5" d3d="9.9" graphics="9.1"/>
</systemdescription>
)#";

        input += '\0';

        std::vector<uint8_t> output = {
            120, 218, 205, 85,  75,  143, 219, 54,  16,  238, 57,  191, 130, 224, 105, 247, 96,  133, 148, 100, 61,
            128, 40,  104, 145, 96,  183, 139, 162, 109, 144, 221, 109, 115, 240, 133, 34,  135, 22,  27,  189, 64,
            81,  94,  109, 130, 252, 247, 14,  41,  199, 222, 108, 209, 158, 138, 162, 52,  96,  147, 31,  31,  51,
            243, 205, 55,  227, 87,  211, 227, 228, 160, 83,  48,  73,  107, 70,  103, 134, 158, 140, 173, 112, 122,
            176, 93,  69,  127, 55,  125, 18,  83,  34,  172, 108, 42,  186, 20,  25,  37,  7,   176, 19,  158, 169,
            104, 28,  241, 136, 83,  50,  205, 246, 0,   143, 21,  229, 244, 245, 139, 87,  123, 209, 1,   233, 241,
            171, 162, 15,  131, 109, 213, 160, 31,  240, 170, 21,  218, 81,  210, 14,  82,  180, 184, 1,   253, 253,
            45,  125, 137, 135, 229, 56,  147, 126, 70,  35,  133, 127, 181, 87,  131, 173, 232, 53,  244, 179, 233,
            225, 166, 119, 208, 158, 108, 137, 138, 178, 133, 49,  150, 176, 76,  148, 39,  180, 14,  40,  231, 140,
            21,  140, 81,  162, 65,  184, 217, 98,  16,  30,  206, 117, 45,  32,  209, 250, 12,  43,  15,  215, 26,
            106, 93,  123, 24,  150, 111, 206, 179, 117, 240, 167, 27,  225, 70,  92,  240, 176, 67,  137, 28,  16,
            243, 16,  151, 140, 165, 60,  198, 179, 82,  200, 6,   3,   218, 161, 23,  187, 101, 43,  240, 55,  217,
            45,  121, 182, 91,  180, 222, 45,  117, 140, 191, 108, 183, 72,  65,  73,  109, 69,  143, 207, 145, 227,
            8,   209, 93,  188, 191, 36,  111, 240, 205, 139, 187, 159, 47,  137, 201, 55,  73,  158, 51,  242, 230,
            221, 61,  249, 158, 36,  81,  202, 174, 127, 252, 68,  73,  39,  150, 105, 4,   192, 171, 73,  234, 157,
            147, 179, 181, 79,  1,   207, 162, 21,  29,  25,  155, 199, 201, 32,  187, 8,   199, 121, 204, 2,   62,
            76,  79,  210, 120, 74,  97,  233, 31,  253, 195, 51,  141, 169, 236, 76,  239, 103, 126, 83,  41,  227,
            51,  239, 159, 64,  119, 103, 211, 162, 137, 50,  246, 113, 143, 214, 28,  76,  11,  123, 12,  52,  65,
            58,  113, 186, 234, 165, 162, 191, 220, 93,  221, 34,  98,  209, 31,  51,  125, 172, 232, 150, 179, 50,
            165, 196, 13,  78,  180, 43,  146, 110, 179, 34,  219, 98,  234, 69,  191, 71,  234, 10,  134, 230, 229,
            136, 90,  137, 183, 104, 212, 125, 66,  47,  208, 130, 154, 220, 58,  209, 173, 216, 7,   138, 147, 53,
            27,  107, 32,  202, 88,  144, 110, 57,  11,  175, 140, 88,  84,  178, 52,  108, 54,  194, 42,  148, 24,
            144, 90,  56,  7,   22,  117, 184, 94,  58,  24,  5,   3,   49,  202, 235, 242, 36,  46,  204, 29,  83,
            128, 6,   225, 96,  36,  132, 117, 34,  99,  207, 8,   6,   100, 195, 81,  220, 146, 98,  156, 86,  77,
            240, 186, 6,   205, 130, 224, 28,  44,  30,  211, 90,  3,   202, 208, 211, 98,  22,  104, 143, 144, 94,
            161, 7,   163, 28,  82,  28,  111, 125, 44,  13,  152, 125, 131, 113, 113, 140, 154, 18,  11,  72,  211,
            212, 248, 200, 125, 156, 152, 19,  225, 206, 186, 227, 190, 172, 48,  143, 72,  24,  43,  51,  207, 63,
            58,  48,  74,  3,   97,  218, 205, 173, 127, 7,   241, 253, 56,  175, 78,  98,  74,  188, 191, 253, 161,
            85,  115, 167, 34,  213, 182, 79,  235, 114, 27,  197, 88,  153, 105, 196, 179, 34,  68,  116, 170, 107,
            76,  217, 111, 55,  111, 111, 126, 32,  215, 112, 53,  88,  9,   228, 250, 238, 3,   41,  243, 231, 140,
            197, 255, 53,  99,  188, 140, 255, 158, 177, 236, 255, 74,  152, 152, 149, 57,  73,  236, 76,  1,   14,
            205, 177, 195, 96,  157, 138, 143, 104, 226, 72,  76,  138, 56,  22,  71,  55,  168, 217, 55,  193, 207,
            44,  10,  159, 227, 248, 18,  125, 22,  69,  6,   82,  214, 98,  147, 197, 169, 220, 164, 76,  165, 155,
            18,  199, 166, 6,   150, 233, 52,  171, 89,  198, 249, 151, 213, 187, 175, 206, 253, 52,  140, 186, 193,
            46,  147, 89,  176, 228, 226, 3,   150, 175, 37,  247, 249, 229, 51,  239, 226, 127, 195, 59,  108, 168,
            128, 41,  227, 27,  174, 97,  187, 73,  11,  72,  54,  69,  13,  232, 93,  158, 38,  165, 212, 58,  79,
            114, 253, 204, 187, 219, 119, 111, 111, 174, 200, 175, 179, 123, 238, 218, 16,  14,  76,  152, 226, 94,
            129, 245, 121, 57,  150, 184, 23,  4,   234, 238, 193, 23,  177, 215, 134, 79,  4,   64,  31,  8,   70,
            49,  12,  237, 188, 190, 252, 143, 165, 230, 179, 111, 38,  209, 141, 62,  144, 176, 198, 214, 120, 192,
            187, 221, 186, 214, 216, 8,   91,  51,  134, 249, 73,  100, 161, 191, 183, 131, 173, 141, 155, 206, 45,
            100, 114, 130, 124, 109, 118, 121, 132, 125, 172, 131, 110, 240, 61,  166, 136, 18,  223, 200, 230, 227,
            108, 109, 118, 225, 132, 74,  124, 227, 140, 176, 207, 237, 173, 24,  27,  35,  39,  191, 92,  59,  245,
            203, 191, 252, 209, 190, 126, 241, 221, 159, 102, 193, 64,  218,
        };

        REQUIRE(zip::compress(input.begin(), input.end()) == output);
    }

    SECTION("Decompressing a large data set must yield the expected output", "[regression]")
    {
        std::vector<uint8_t> input = {
            120, 218, 205, 85,  75,  143, 219, 54,  16,  238, 57,  191, 130, 224, 105, 247, 96,  133, 148, 100, 61,
            128, 40,  104, 145, 96,  183, 139, 162, 109, 144, 221, 109, 115, 240, 133, 34,  135, 22,  27,  189, 64,
            81,  94,  109, 130, 252, 247, 14,  41,  199, 222, 108, 209, 158, 138, 162, 52,  96,  147, 31,  31,  51,
            243, 205, 55,  227, 87,  211, 227, 228, 160, 83,  48,  73,  107, 70,  103, 134, 158, 140, 173, 112, 122,
            176, 93,  69,  127, 55,  125, 18,  83,  34,  172, 108, 42,  186, 20,  25,  37,  7,   176, 19,  158, 169,
            104, 28,  241, 136, 83,  50,  205, 246, 0,   143, 21,  229, 244, 245, 139, 87,  123, 209, 1,   233, 241,
            171, 162, 15,  131, 109, 213, 160, 31,  240, 170, 21,  218, 81,  210, 14,  82,  180, 184, 1,   253, 253,
            45,  125, 137, 135, 229, 56,  147, 126, 70,  35,  133, 127, 181, 87,  131, 173, 232, 53,  244, 179, 233,
            225, 166, 119, 208, 158, 108, 137, 138, 178, 133, 49,  150, 176, 76,  148, 39,  180, 14,  40,  231, 140,
            21,  140, 81,  162, 65,  184, 217, 98,  16,  30,  206, 117, 45,  32,  209, 250, 12,  43,  15,  215, 26,
            106, 93,  123, 24,  150, 111, 206, 179, 117, 240, 167, 27,  225, 70,  92,  240, 176, 67,  137, 28,  16,
            243, 16,  151, 140, 165, 60,  198, 179, 82,  200, 6,   3,   218, 161, 23,  187, 101, 43,  240, 55,  217,
            45,  121, 182, 91,  180, 222, 45,  117, 140, 191, 108, 183, 72,  65,  73,  109, 69,  143, 207, 145, 227,
            8,   209, 93,  188, 191, 36,  111, 240, 205, 139, 187, 159, 47,  137, 201, 55,  73,  158, 51,  242, 230,
            221, 61,  249, 158, 36,  81,  202, 174, 127, 252, 68,  73,  39,  150, 105, 4,   192, 171, 73,  234, 157,
            147, 179, 181, 79,  1,   207, 162, 21,  29,  25,  155, 199, 201, 32,  187, 8,   199, 121, 204, 2,   62,
            76,  79,  210, 120, 74,  97,  233, 31,  253, 195, 51,  141, 169, 236, 76,  239, 103, 126, 83,  41,  227,
            51,  239, 159, 64,  119, 103, 211, 162, 137, 50,  246, 113, 143, 214, 28,  76,  11,  123, 12,  52,  65,
            58,  113, 186, 234, 165, 162, 191, 220, 93,  221, 34,  98,  209, 31,  51,  125, 172, 232, 150, 179, 50,
            165, 196, 13,  78,  180, 43,  146, 110, 179, 34,  219, 98,  234, 69,  191, 71,  234, 10,  134, 230, 229,
            136, 90,  137, 183, 104, 212, 125, 66,  47,  208, 130, 154, 220, 58,  209, 173, 216, 7,   138, 147, 53,
            27,  107, 32,  202, 88,  144, 110, 57,  11,  175, 140, 88,  84,  178, 52,  108, 54,  194, 42,  148, 24,
            144, 90,  56,  7,   22,  117, 184, 94,  58,  24,  5,   3,   49,  202, 235, 242, 36,  46,  204, 29,  83,
            128, 6,   225, 96,  36,  132, 117, 34,  99,  207, 8,   6,   100, 195, 81,  220, 146, 98,  156, 86,  77,
            240, 186, 6,   205, 130, 224, 28,  44,  30,  211, 90,  3,   202, 208, 211, 98,  22,  104, 143, 144, 94,
            161, 7,   163, 28,  82,  28,  111, 125, 44,  13,  152, 125, 131, 113, 113, 140, 154, 18,  11,  72,  211,
            212, 248, 200, 125, 156, 152, 19,  225, 206, 186, 227, 190, 172, 48,  143, 72,  24,  43,  51,  207, 63,
            58,  48,  74,  3,   97,  218, 205, 173, 127, 7,   241, 253, 56,  175, 78,  98,  74,  188, 191, 253, 161,
            85,  115, 167, 34,  213, 182, 79,  235, 114, 27,  197, 88,  153, 105, 196, 179, 34,  68,  116, 170, 107,
            76,  217, 111, 55,  111, 111, 126, 32,  215, 112, 53,  88,  9,   228, 250, 238, 3,   41,  243, 231, 140,
            197, 255, 53,  99,  188, 140, 255, 158, 177, 236, 255, 74,  152, 152, 149, 57,  73,  236, 76,  1,   14,
            205, 177, 195, 96,  157, 138, 143, 104, 226, 72,  76,  138, 56,  22,  71,  55,  168, 217, 55,  193, 207,
            44,  10,  159, 227, 248, 18,  125, 22,  69,  6,   82,  214, 98,  147, 197, 169, 220, 164, 76,  165, 155,
            18,  199, 166, 6,   150, 233, 52,  171, 89,  198, 249, 151, 213, 187, 175, 206, 253, 52,  140, 186, 193,
            46,  147, 89,  176, 228, 226, 3,   150, 175, 37,  247, 249, 229, 51,  239, 226, 127, 195, 59,  108, 168,
            128, 41,  227, 27,  174, 97,  187, 73,  11,  72,  54,  69,  13,  232, 93,  158, 38,  165, 212, 58,  79,
            114, 253, 204, 187, 219, 119, 111, 111, 174, 200, 175, 179, 123, 238, 218, 16,  14,  76,  152, 226, 94,
            129, 245, 121, 57,  150, 184, 23,  4,   234, 238, 193, 23,  177, 215, 134, 79,  4,   64,  31,  8,   70,
            49,  12,  237, 188, 190, 252, 143, 165, 230, 179, 111, 38,  209, 141, 62,  144, 176, 198, 214, 120, 192,
            187, 221, 186, 214, 216, 8,   91,  51,  134, 249, 73,  100, 161, 191, 183, 131, 173, 141, 155, 206, 45,
            100, 114, 130, 124, 109, 118, 121, 132, 125, 172, 131, 110, 240, 61,  166, 136, 18,  223, 200, 230, 227,
            108, 109, 118, 225, 132, 74,  124, 227, 140, 176, 207, 237, 173, 24,  27,  35,  39,  191, 92,  59,  245,
            203, 191, 252, 209, 190, 126, 241, 221, 159, 102, 193, 64,  218,
        };

        std::string output = R"#(<systemdescription platform="Win32" arch="x86" version="2.1.1" survey="1">
<game name="worldofwarcraft" locale="enUS"/>
<cpu num="8" vendor="GenuineIntel" versiona="0x000306a9" versionb="0x01100800" featuresc="0x7fbae3ff" featuresd="0xbfebfbff" exfeaturesc="0x00000001" exfeaturesd="0x28100000" cores="0x1c004121" cache="\x01\x5a\x03\x76\xff\xb2\xf0\xca" brand="        Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz" maxspeed="3401" currspeed="3401"/>
<ram physical="32720"/>
<os platform="2" arch="9" major="6" minor="2" additional="" build="9200" privilege="3" filesystem="NTFS" freedisk="51094" totaldisk="456865" lang="0809" cp="1252" tz="60" dst="60" flags="0x30000010"/>
<directx version="9.0.904"/>
<hardware battery="0"/>
<video id="1" vendor="0x10de" device="0x13c2" master="1" devcaps="0x001bbef0" vertex="0xfffe0300" pixel="0xffff0300" width="2560" height="1080" refresh="120" format="0x00000016" vram="4096" bus="pcie" busmult="16" gpu="1" driver="nvldumd.dll" version="25.21.14.1681" description="NVIDIA GeForce GTX 970"/>
<video id="2" vendor="0x10de" device="0x13c2" master="1" devcaps="0x001bbef0" vertex="0xfffe0300" pixel="0xffff0300" width="1920" height="1080" refresh="60" format="0x00000016" vram="4096" bus="pcie" busmult="16" gpu="1" driver="nvldumd.dll" version="25.21.14.1681" description="NVIDIA GeForce GTX 970"/>
<audio id="1" caps="0x00000f1f" speakers="0x00140004" module="{0.0.0.00000000}.{a86eccba-624c-40d4-9999-be06f46b0611}" desciption="Kopfh\xf6rer (Xonar U7)"/>
<audio id="2" caps="0x00000f1f" speakers="0x00140004" module="{0.0.0.00000000}.{7fbe3001-1fe5-48e3-8be9-b7439cff737f}" desciption="SPDIF Out (Xonar U7)"/>
<options renderer="directx" window="0" widescreen="1" resolution="" width="2560" height="1080" multisample="0" musicvolume="0" farclip="0" refresh="0" colorbits="0"/>
<vista system="7.5" memory="8.3" cpu="8.3" disk="7.5" d3d="9.9" graphics="9.1"/>
</systemdescription>
)#";

        REQUIRE(std::equal(output.begin(), output.end(), zip::decompress(input.begin(), input.end()).begin()));
    }
}